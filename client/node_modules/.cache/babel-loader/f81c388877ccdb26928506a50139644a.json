{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\popes\\\\React\\\\online-voting\\\\client\\\\src\\\\ListPolls.js\";\nimport React from 'react';\nimport \"antd/dist/antd.css\";\nimport \"./index.css\";\nimport { List, Avatar, Icon, Skeleton, Divider, Radio, Statistic, Collapse } from \"antd\";\nimport ReactNotification from \"react-notifications-component\";\nimport \"react-notifications-component/dist/theme.css\";\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport Image from 'react-bootstrap/Image';\nimport ChartBar from './Chart';\nimport Comments from './Comments';\nimport memoize from 'memoize-one';\nconst Countdown = Statistic.Countdown;\nconst Panel = Collapse.Panel;\n\nconst IconText = ({\n  type,\n  text,\n  onClick\n}) => React.createElement(\"span\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 21\n  },\n  __self: this\n}, React.createElement(Icon, {\n  type: type,\n  style: {\n    marginRight: 8\n  },\n  onClick: onClick,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 22\n  },\n  __self: this\n}), text);\n\nconst poll = {\n  \"_id\": \"\",\n  \"author\": \"\",\n  \"authorId\": \"\",\n  \"title\": \"\",\n  \"options\": [{\n    \"_id\": \"\",\n    \"name\": \"\",\n    \"key\": \"\",\n    \"votes\": 0\n  }, {\n    \"_id\": \"\",\n    \"name\": \"\",\n    \"key\": \"\",\n    \"votes\": 0\n  }],\n  \"expireDate\": \"\",\n  \"image\": {\n    \"_id\": \"\",\n    \"url\": \"\",\n    \"type\": \"\"\n  },\n  \"description\": \"\",\n  \"likes\": 0,\n  \"comments\": [],\n  \"createdAt\": \"\",\n  \"updatedAt\": \"\",\n  \"__v\": 0\n};\nexport default class ListPolls extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getPolls = () => {\n      this.setState({\n        loading: true\n      }, () => {\n        fetch('http://localhost:3001/api/polls').then(res => {\n          if (res.status === 200) {\n            res.json().then(data => {\n              this.setState({\n                loading: false,\n                polls: data,\n                selectedPoll: data[0]\n              }, () => {\n                this.populateData();\n              });\n            });\n          }\n        });\n      });\n    };\n\n    this.showNotification = (ref, message, title, type, duration) => {\n      ref.current.addNotification({\n        title: title,\n        message: message,\n        type: type,\n        insert: \"top\",\n        container: \"top-center\",\n        animationIn: [\"animated\", \"fadeIn\"],\n        animationOut: [\"animated\", \"fadeOut\"],\n        dismiss: {\n          duration: duration\n        },\n        dismissable: {\n          click: true\n        }\n      });\n    };\n\n    this.populateData = () => {\n      let listData = [];\n      this.state.polls.forEach(item => {\n        listData.push({\n          title: item.title,\n          avatar: \"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\",\n          content: item.description,\n          imageUrl: item.image.url,\n          createdAt: item.createdAt,\n          likes: item.likes,\n          comments: item.comments,\n          id: item._id\n        });\n      });\n      this.setState({\n        listData: listData,\n        user: this.props.user\n      });\n    };\n\n    this.handlePollClick = id => {\n      let poll = this.getPollById(id);\n      const expDate = new Date(poll.expireDate).valueOf();\n      const dateNow = Date.now();\n\n      if (dateNow >= expDate) {\n        this.showNotification(this.notificationDOMREF, \"This poll has expired so you won't be able to vote!\", \"Info\", \"warning\", 2000);\n      }\n\n      this.setState({\n        visible: true,\n        selectedPoll: poll\n      });\n    };\n\n    this.handleOk = () => {\n      this.setState({\n        visible: false\n      });\n    };\n\n    this.handleCancel = () => {\n      this.setState({\n        visible: false\n      });\n    };\n\n    this.getPollById = id => {\n      let poll = this.state.polls.filter(poll => {\n        return poll._id === id;\n      });\n      return poll[0];\n    };\n\n    this.onChange = e => {\n      this.setState({\n        radioValue: e.target.value\n      });\n    };\n\n    this.handleClose = () => {\n      this.setState({\n        show: false\n      });\n    };\n\n    this.openSecondModal = () => {\n      this.setState({\n        show: true\n      });\n    };\n\n    this.handleOkVote = () => {\n      let currentPollId = this.state.selectedPoll._id;\n      const vote = {\n        pollId: currentPollId,\n        voteId: this.state.radioValue,\n        userId: this.state.user._id\n      };\n      fetch(\"http://localhost:3001/api/vote\", {\n        method: 'POST',\n        body: JSON.stringify(vote),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(res => {\n        if (res.status === 200) {\n          let alteredSelectedPoll = this.state.selectedPoll;\n          alteredSelectedPoll.votes++;\n          let voteToAdd = {\n            pollId: vote.pollId,\n            voteId: vote.voteId\n          };\n          let alteredUser = this.state.user;\n          alteredUser.votes.push(voteToAdd);\n          this.setState({\n            selectedPoll: alteredSelectedPoll,\n            user: alteredUser,\n            show: false\n          });\n        } else {\n          res.json().then(data => {\n            console.log(data);\n          });\n        }\n      });\n    };\n\n    this.checkForRadioAvailability = (pollId, expireDate) => {\n      const numExpDate = new Date(expireDate).valueOf();\n      const numDateNow = Date.now();\n\n      if (numDateNow >= numExpDate) {\n        return true;\n      }\n\n      if (this.props.isLoggedIn) {\n        let votes = this.state.user.votes;\n\n        if (votes.length === 0) {\n          return false;\n        }\n\n        let voted = votes.filter(vote => {\n          return vote.pollId.localeCompare(pollId) === 0;\n        });\n        return voted.length !== 0;\n      } else {\n        return true;\n      }\n    };\n\n    this.checkIfChecked = (pollId, optionId) => {\n      if (this.props.isLoggedIn) {\n        let votes = this.state.user.votes;\n\n        if (votes.length === 0) {\n          return false;\n        }\n\n        let voted = votes.filter(vote => {\n          return vote.voteId.localeCompare(optionId) === 0;\n        });\n        return voted.length !== 0;\n      } else {\n        return false;\n      }\n    };\n\n    this.addLike = pollId => {\n      if (this.props.isLoggedIn) {\n        fetch('http://localhost:3001/api/like', {\n          method: 'POST',\n          body: JSON.stringify({\n            pollId: pollId\n          }),\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }).then(res => {\n          if (res.status === 200) {\n            let listData = this.state.listData.map(item => {\n              if (item.id.localeCompare(pollId) === 0) {\n                item.likes++;\n              }\n\n              return item;\n            });\n            this.setState({\n              listData: listData\n            });\n          }\n        });\n      }\n    };\n\n    this.state = {\n      loading: false,\n      polls: [],\n      listData: [],\n      visible: false,\n      selectedPoll: poll,\n      radioValue: null,\n      show: false,\n      user: null\n    };\n    this.notificationDOMREF = React.createRef();\n  }\n\n  componentDidMount() {\n    this.getPolls();\n  }\n\n  componentWillReceiveProps(nextProps) {\n    let someProps = nextProps !== null ? nextProps : this.props;\n    this.setState({\n      user: someProps.user\n    }, () => {\n      if (nextProps.hasChanged === true) this.getPolls();\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col md-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323\n      },\n      __self: this\n    }, React.createElement(Skeleton, {\n      loading: this.state.loading,\n      active: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324\n      },\n      __self: this\n    }, React.createElement(List, {\n      itemLayout: \"vertical\",\n      size: \"large\",\n      pagination: {\n        onChange: page => {\n          console.log(page);\n        },\n        pageSize: 3\n      },\n      dataSource: this.state.listData,\n      footer: React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 336\n        },\n        __self: this\n      }, React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 337\n        },\n        __self: this\n      }, \"ant design\"), \" footer part\"),\n      renderItem: item => React.createElement(List.Item, {\n        key: item.title,\n        actions: [React.createElement(IconText, {\n          type: \"like-o\",\n          text: item.likes,\n          onClick: () => {\n            this.addLike(item.id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 344\n          },\n          __self: this\n        }), React.createElement(Collapse, {\n          accordion: true,\n          bordered: false,\n          expandIcon: () => React.createElement(IconText, {\n            type: \"message\",\n            text: item.comments.length,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 345\n            },\n            __self: this\n          }),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 345\n          },\n          __self: this\n        }, React.createElement(Panel, {\n          key: \"1\",\n          header: \"\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 346\n          },\n          __self: this\n        }, React.createElement(Comments, {\n          data: item,\n          user: this.state.user,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 347\n          },\n          __self: this\n        }))), React.createElement(IconText, {\n          type: \"delete\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 350\n          },\n          __self: this\n        })],\n        extra: React.createElement(\"button\", {\n          className: \"invisible-button\",\n          onClick: () => this.handlePollClick(item.id),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 353\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          width: 272,\n          alt: \"logo\",\n          src: 'http://localhost:3001/api/image/' + item.imageUrl,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 354\n          },\n          __self: this\n        })),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 341\n        },\n        __self: this\n      }, React.createElement(List.Item.Meta, {\n        avatar: React.createElement(Avatar, {\n          src: item.avatar,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 363\n          },\n          __self: this\n        }),\n        title: React.createElement(\"button\", {\n          className: \"invisible-button\",\n          onClick: () => this.handlePollClick(item.id),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 364\n          },\n          __self: this\n        }, item.title),\n        description: \"Created at: \".concat(new Date(this.state.selectedPoll.createdAt).toLocaleString('mk-MK', {\n          timeZone: 'UTC'\n        })),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 362\n        },\n        __self: this\n      }), item.content),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325\n      },\n      __self: this\n    })))), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374\n      },\n      __self: this\n    }, React.createElement(Modal, {\n      show: this.state.show,\n      onHide: this.handleClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375\n      },\n      __self: this\n    }, React.createElement(Modal.Header, {\n      closeButton: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376\n      },\n      __self: this\n    }, React.createElement(Modal.Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377\n      },\n      __self: this\n    }, \"Are You Sure?\")), React.createElement(Modal.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379\n      },\n      __self: this\n    }, \"By clicking OK you accept to vote for the selected option!\"), React.createElement(Modal.Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"secondary\",\n      onClick: this.handleClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381\n      },\n      __self: this\n    }, \"Close\"), React.createElement(Button, {\n      variant: \"primary\",\n      onClick: this.handleOkVote,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384\n      },\n      __self: this\n    }, \"OK\")))), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390\n      },\n      __self: this\n    }, React.createElement(ReactNotification, {\n      ref: this.notificationDOMREF,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391\n      },\n      __self: this\n    }), React.createElement(Modal, {\n      size: \"lg\",\n      show: this.state.visible,\n      onHide: this.handleCancel,\n      \"aria-labelledby\": \"example-modal-sizes-title-lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392\n      },\n      __self: this\n    }, React.createElement(Modal.Header, {\n      closeButton: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400\n      },\n      __self: this\n    }, React.createElement(Modal.Title, {\n      id: \"example-modal-sizes-title-lg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401\n      },\n      __self: this\n    }, this.state.selectedPoll.title)), React.createElement(Modal.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-md-4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409\n      },\n      __self: this\n    }, React.createElement(\"small\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409\n      },\n      __self: this\n    }, \"Author: \", this.state.selectedPoll.author))), React.createElement(\"div\", {\n      className: \"col-md-4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412\n      },\n      __self: this\n    }, React.createElement(\"small\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412\n      },\n      __self: this\n    }, \"Created at: \", new Date(this.state.selectedPoll.createdAt).toLocaleString('mk-MK', {\n      timeZone: 'UTC'\n    })))), React.createElement(\"div\", {\n      className: \"col-md-4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414\n      },\n      __self: this\n    }, React.createElement(Countdown, {\n      title: \"Time Remaining\",\n      value: this.state.selectedPoll.expireDate,\n      format: \"D - H : m : s \",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"col-md-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 417\n      },\n      __self: this\n    }, React.createElement(Image, {\n      src: 'http://localhost:3001/api/image/' + this.state.selectedPoll.image.url,\n      alt: this.state.selectedPoll._id,\n      height: 300,\n      fluid: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"col-md-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424\n      },\n      __self: this\n    }, React.createElement(\"h6\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425\n      },\n      __self: this\n    }, \"Description:\"), React.createElement(\"h6\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426\n      },\n      __self: this\n    }, this.state.selectedPoll.description)), React.createElement(Divider, {\n      orientation: \"left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428\n      },\n      __self: this\n    }, \"Voting Options\"), React.createElement(\"div\", {\n      className: \"col-md-3 mx-auto\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429\n      },\n      __self: this\n    }, React.createElement(Radio.Group, {\n      onChange: this.onChange,\n      value: this.state.radioValue,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430\n      },\n      __self: this\n    }, this.state.selectedPoll.options.map(option => {\n      return React.createElement(Radio, {\n        key: option._id,\n        onClick: this.openSecondModal,\n        value: option._id,\n        disabled: this.checkForRadioAvailability(this.state.selectedPoll._id, this.state.selectedPoll.expireDate),\n        checked: this.checkIfChecked(this.state.selectedPoll._id, option._id),\n        defaultChecked: this.checkIfChecked(this.state.selectedPoll._id, option._id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 433\n        },\n        __self: this\n      }, option.name);\n    }))), React.createElement(Divider, {\n      orientation: \"left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 439\n      },\n      __self: this\n    }, \"Votes Result\"), React.createElement(\"div\", {\n      className: \"col-auto mx-auto\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440\n      },\n      __self: this\n    }, React.createElement(ChartBar, {\n      data: this.state.selectedPoll,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 441\n      },\n      __self: this\n    })), React.createElement(Divider, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 443\n      },\n      __self: this\n    })))))));\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\popes\\React\\online-voting\\client\\src\\ListPolls.js"],"names":["React","List","Avatar","Icon","Skeleton","Divider","Radio","Statistic","Collapse","ReactNotification","Modal","Button","Image","ChartBar","Comments","memoize","Countdown","Panel","IconText","type","text","onClick","marginRight","poll","ListPolls","Component","constructor","props","getPolls","setState","loading","fetch","then","res","status","json","data","polls","selectedPoll","populateData","showNotification","ref","message","title","duration","current","addNotification","insert","container","animationIn","animationOut","dismiss","dismissable","click","listData","state","forEach","item","push","avatar","content","description","imageUrl","image","url","createdAt","likes","comments","id","_id","user","handlePollClick","getPollById","expDate","Date","expireDate","valueOf","dateNow","now","notificationDOMREF","visible","handleOk","handleCancel","filter","onChange","e","radioValue","target","value","handleClose","show","openSecondModal","handleOkVote","currentPollId","vote","pollId","voteId","userId","method","body","JSON","stringify","headers","alteredSelectedPoll","votes","voteToAdd","alteredUser","console","log","checkForRadioAvailability","numExpDate","numDateNow","isLoggedIn","length","voted","localeCompare","checkIfChecked","optionId","addLike","map","createRef","componentDidMount","componentWillReceiveProps","nextProps","someProps","hasChanged","render","page","pageSize","toLocaleString","timeZone","author","options","option","name"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport \"antd/dist/antd.css\";\r\nimport \"./index.css\";\r\nimport { List, Avatar, Icon, Skeleton, Divider, Radio, Statistic, Collapse } from \"antd\";\r\nimport ReactNotification from \"react-notifications-component\";\r\nimport \"react-notifications-component/dist/theme.css\";\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Image from 'react-bootstrap/Image';\r\nimport ChartBar from './Chart';\r\nimport Comments from './Comments';\r\nimport memoize from 'memoize-one';\r\n\r\n\r\n\r\n\r\nconst { Countdown } = Statistic;\r\nconst { Panel } = Collapse;\r\n\r\nconst IconText = ({ type, text, onClick }) => (\r\n    <span>\r\n    <Icon type={type} style={{ marginRight: 8 }} onClick={onClick} />\r\n        {text}\r\n  </span>\r\n);\r\n\r\n\r\nconst poll =\r\n    {\r\n        \"_id\": \"\",\r\n        \"author\": \"\",\r\n        \"authorId\": \"\",\r\n        \"title\": \"\",\r\n        \"options\": [\r\n            {\r\n                \"_id\": \"\",\r\n                \"name\": \"\",\r\n                \"key\": \"\",\r\n                \"votes\": 0\r\n            },\r\n            {\r\n                \"_id\": \"\",\r\n                \"name\": \"\",\r\n                \"key\": \"\",\r\n                \"votes\": 0\r\n            }\r\n        ],\r\n        \"expireDate\": \"\",\r\n        \"image\": {\r\n            \"_id\": \"\",\r\n            \"url\": \"\",\r\n            \"type\": \"\"\r\n        },\r\n        \"description\": \"\",\r\n        \"likes\": 0,\r\n        \"comments\": [],\r\n        \"createdAt\": \"\",\r\n        \"updatedAt\": \"\",\r\n        \"__v\": 0\r\n    };\r\n\r\nexport default class ListPolls extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state={\r\n            loading: false,\r\n            polls: [],\r\n            listData: [],\r\n            visible: false,\r\n            selectedPoll: poll,\r\n            radioValue: null,\r\n            show: false,\r\n            user: null\r\n        };\r\n\r\n        this.notificationDOMREF = React.createRef();\r\n    }\r\n\r\n\r\n    componentDidMount(){\r\n        this.getPolls();\r\n    }\r\n\r\n   componentWillReceiveProps(nextProps){\r\n        let someProps = nextProps!== null ? nextProps : this.props;\r\n       this.setState({\r\n           user: someProps.user\r\n       }, () => {\r\n                  if(nextProps.hasChanged === true)\r\n                   this.getPolls();\r\n       });\r\n\r\n\r\n    }\r\n\r\n    getPolls = () => {\r\n        this.setState({\r\n            loading: true\r\n        }, () => {\r\n            fetch('http://localhost:3001/api/polls')\r\n                .then(res => {\r\n                    if (res.status === 200) {\r\n                        res.json().then(data => {\r\n                            this.setState({\r\n                                loading: false,\r\n                                polls: data,\r\n                                selectedPoll: data[0]\r\n                            }, () => {this.populateData()});\r\n                        })\r\n                    }\r\n                })\r\n        });\r\n    };\r\n\r\n\r\n\r\n\r\n    showNotification = (ref,message, title, type, duration) => {\r\n\r\n        ref.current.addNotification({\r\n            title: title,\r\n            message: message,\r\n            type: type,\r\n            insert: \"top\",\r\n            container: \"top-center\",\r\n            animationIn: [\"animated\", \"fadeIn\"],\r\n            animationOut: [\"animated\", \"fadeOut\"],\r\n            dismiss: { duration: duration },\r\n            dismissable: { click: true }\r\n        });\r\n\r\n    };\r\n\r\n\r\n    populateData = () => {\r\n          let listData = [];\r\n          this.state.polls.forEach(item => {\r\n              listData.push({\r\n                  title: item.title,\r\n                  avatar: \"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\",\r\n                  content: item.description,\r\n                  imageUrl: item.image.url,\r\n                  createdAt: item.createdAt,\r\n                  likes: item.likes,\r\n                  comments: item.comments,\r\n                  id: item._id\r\n              });\r\n          });\r\n          this.setState({\r\n              listData: listData,\r\n              user: this.props.user\r\n          });\r\n\r\n    };\r\n\r\n    handlePollClick = (id) => {\r\n        let poll = this.getPollById(id);\r\n        const expDate = new Date(poll.expireDate).valueOf();\r\n        const dateNow = Date.now();\r\n\r\n        if(dateNow>=expDate){\r\n            this.showNotification(this.notificationDOMREF,\"This poll has expired so you won't be able to vote!\",\"Info\",\"warning\",2000);\r\n        }\r\n\r\n      this.setState({\r\n          visible: true,\r\n          selectedPoll: poll\r\n      });\r\n    };\r\n\r\n    handleOk = () => {\r\n      this.setState({\r\n          visible: false\r\n      })\r\n    };\r\n\r\n\r\n    handleCancel = () => {\r\n      this.setState({\r\n          visible: false\r\n      })\r\n    };\r\n\r\n    getPollById = (id) =>{\r\n      let poll = this.state.polls.filter(poll => {\r\n          return poll._id === id;\r\n      });\r\n      return poll[0];\r\n    };\r\n\r\n    onChange = (e) => {\r\n        this.setState({\r\n            radioValue: e.target.value\r\n        });\r\n    };\r\n\r\n    handleClose = () =>{\r\n      this.setState({\r\n          show: false\r\n      });\r\n    };\r\n\r\n    openSecondModal = () => {\r\n      this.setState({\r\n          show: true\r\n      });\r\n    };\r\n\r\n    handleOkVote = () => {\r\n        let currentPollId = this.state.selectedPoll._id;\r\n        const vote = {\r\n          pollId: currentPollId,\r\n          voteId: this.state.radioValue,\r\n          userId: this.state.user._id\r\n        };\r\n\r\n        fetch(\"http://localhost:3001/api/vote\",{\r\n            method: 'POST',\r\n            body: JSON.stringify(vote),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n            .then(res => {\r\n                if(res.status === 200) {\r\n                    let alteredSelectedPoll = this.state.selectedPoll;\r\n                    alteredSelectedPoll.votes++;\r\n                    let voteToAdd = {\r\n                        pollId: vote.pollId,\r\n                        voteId: vote.voteId\r\n                    };\r\n                    let alteredUser = this.state.user;\r\n                    alteredUser.votes.push(voteToAdd);\r\n                    this.setState({\r\n                        selectedPoll: alteredSelectedPoll,\r\n                        user: alteredUser,\r\n                        show: false\r\n                    });\r\n                }\r\n                else{\r\n                    res.json().then(data => {console.log(data)});\r\n                }\r\n            })\r\n    };\r\n\r\n    checkForRadioAvailability = (pollId, expireDate) => {\r\n        const numExpDate = new Date(expireDate).valueOf();\r\n        const numDateNow = Date.now();\r\n\r\n        if(numDateNow >= numExpDate){\r\n            return true;\r\n        }\r\n\r\n        if(this.props.isLoggedIn) {\r\n            let votes = this.state.user.votes;\r\n            if(votes.length === 0){\r\n                return false;\r\n            }\r\n            let voted = votes.filter(vote => {\r\n                return vote.pollId.localeCompare(pollId) === 0\r\n            });\r\n            return voted.length !== 0\r\n        }\r\n        else{\r\n            return true;\r\n        }\r\n\r\n    };\r\n\r\n    checkIfChecked = (pollId, optionId) => {\r\n      if(this.props.isLoggedIn) {\r\n\r\n          let votes = this.state.user.votes;\r\n          if(votes.length === 0){\r\n              return false;\r\n          }\r\n          let voted = votes.filter(vote => {\r\n              return vote.voteId.localeCompare(optionId) === 0;\r\n          });\r\n          return voted.length!==0;\r\n      }\r\n      else{\r\n          return false;\r\n      }\r\n\r\n    };\r\n\r\n\r\n    addLike = (pollId) => {\r\n        if(this.props.isLoggedIn) {\r\n\r\n            fetch('http://localhost:3001/api/like', {\r\n                method: 'POST',\r\n                body: JSON.stringify({pollId: pollId}),\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            })\r\n                .then(res => {\r\n                    if (res.status === 200) {\r\n                        let listData = this.state.listData.map(item => {\r\n                            if (item.id.localeCompare(pollId) === 0) {\r\n                                item.likes++;\r\n                            }\r\n                            return item;\r\n                        });\r\n\r\n                        this.setState({\r\n                            listData: listData\r\n                        });\r\n\r\n                    }\r\n                })\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col md-12\">\r\n                        <Skeleton loading={this.state.loading} active>\r\n                        <List\r\n                            itemLayout=\"vertical\"\r\n                            size=\"large\"\r\n                            pagination={{\r\n                                onChange: page => {\r\n                                    console.log(page);\r\n                                },\r\n                                pageSize: 3\r\n                            }}\r\n                            dataSource={this.state.listData}\r\n                            footer={\r\n                                <div>\r\n                                    <b>ant design</b> footer part\r\n                                </div>\r\n                            }\r\n                            renderItem={item => (\r\n                                <List.Item\r\n                                    key={item.title}\r\n                                    actions={[\r\n                                        <IconText type=\"like-o\" text={item.likes} onClick={() => {this.addLike(item.id)}} />,\r\n                                        <Collapse accordion bordered={false} expandIcon={() => <IconText type=\"message\" text={item.comments.length}/>}>\r\n                                            <Panel key=\"1\" header=\"\">\r\n                                                <Comments data={item} user={this.state.user}/>\r\n                                            </Panel>\r\n                                        </Collapse>,\r\n                                        <IconText type=\"delete\" />\r\n                                    ]}\r\n                                    extra={\r\n                                        <button className=\"invisible-button\" onClick={() => this.handlePollClick(item.id)}>\r\n                                        <img\r\n                                            width={272}\r\n                                            alt=\"logo\"\r\n                                            src={'http://localhost:3001/api/image/' + item.imageUrl}\r\n                                        />\r\n                                        </button>\r\n                                    }\r\n                                >\r\n                                    <List.Item.Meta\r\n                                        avatar={<Avatar src={item.avatar} />}\r\n                                        title={<button className=\"invisible-button\" onClick={() => this.handlePollClick(item.id)}>{item.title}</button>}\r\n                                        description={`Created at: ${new Date(this.state.selectedPoll.createdAt).toLocaleString('mk-MK', {timeZone: 'UTC'})}`}\r\n                                    />\r\n                                    {item.content}\r\n                                </List.Item>\r\n                            )}\r\n                        />\r\n                        </Skeleton>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <Modal show={this.state.show} onHide={this.handleClose}>\r\n                        <Modal.Header closeButton>\r\n                            <Modal.Title>Are You Sure?</Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>By clicking OK you accept to vote for the selected option!</Modal.Body>\r\n                        <Modal.Footer>\r\n                            <Button variant=\"secondary\" onClick={this.handleClose}>\r\n                                Close\r\n                            </Button>\r\n                            <Button variant=\"primary\" onClick={this.handleOkVote}>\r\n                                OK\r\n                            </Button>\r\n                        </Modal.Footer>\r\n                    </Modal>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <ReactNotification ref={this.notificationDOMREF}/>\r\n                    <Modal\r\n                    size=\"lg\"\r\n                    show={this.state.visible}\r\n                    onHide={this.handleCancel}\r\n                    aria-labelledby=\"example-modal-sizes-title-lg\"\r\n\r\n                    >\r\n\r\n                        <Modal.Header closeButton>\r\n                         <Modal.Title id=\"example-modal-sizes-title-lg\">\r\n                             {this.state.selectedPoll.title}\r\n                            </Modal.Title>\r\n                        </Modal.Header>\r\n                        <Modal.Body>\r\n                            <div className=\"container\">\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-md-4\">\r\n                                        <p><small>Author: {this.state.selectedPoll.author}</small></p>\r\n                                    </div>\r\n                                    <div className=\"col-md-4\">\r\n                                        <p><small>Created at: {new Date(this.state.selectedPoll.createdAt).toLocaleString('mk-MK', {timeZone: 'UTC'})}</small></p>\r\n                                    </div>\r\n                                    <div className=\"col-md-4\">\r\n                                        <Countdown title=\"Time Remaining\" value={this.state.selectedPoll.expireDate} format=\"D - H : m : s \" />\r\n                                    </div>\r\n                                    <div className=\"col-md-12\">\r\n                                        <Image src={'http://localhost:3001/api/image/' + this.state.selectedPoll.image.url}\r\n                                             alt={this.state.selectedPoll._id}\r\n                                             height={300}\r\n                                             fluid\r\n                                        />\r\n                                    </div>\r\n                                    <div className=\"col-md-12\">\r\n                                        <h6>Description:</h6>\r\n                                        <h6>{this.state.selectedPoll.description }</h6>\r\n                                    </div>\r\n                                    <Divider orientation=\"left\">Voting Options</Divider>\r\n                                    <div className=\"col-md-3 mx-auto\">\r\n                                        <Radio.Group onChange={this.onChange} value={this.state.radioValue}>\r\n                                            {\r\n                                                this.state.selectedPoll.options.map(option => {\r\n                                                    return <Radio key={option._id} onClick={this.openSecondModal}  value={option._id} disabled={this.checkForRadioAvailability(this.state.selectedPoll._id, this.state.selectedPoll.expireDate)}\r\n                                                                 checked={this.checkIfChecked(this.state.selectedPoll._id, option._id)} defaultChecked={this.checkIfChecked(this.state.selectedPoll._id, option._id)}>{option.name}</Radio>\r\n                                                })\r\n                                            }\r\n                                        </Radio.Group>\r\n                                    </div>\r\n                                    <Divider orientation=\"left\">Votes Result</Divider>\r\n                                    <div className=\"col-auto mx-auto\">\r\n                                        <ChartBar data={this.state.selectedPoll}/>\r\n                                    </div>\r\n                                    <Divider/>\r\n                                </div>\r\n                            </div>\r\n                        </Modal.Body>\r\n                    </Modal>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}