{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\popes\\\\React\\\\online-voting\\\\client\\\\src\\\\Login.js\";\nimport React from \"react\";\nimport ReactNotification from \"react-notifications-component\";\nimport \"react-notifications-component/dist/theme.css\";\nexport default class Login extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onSubmit = event => {\n      event.preventDefault();\n      let loginData = {\n        email: this.state.email,\n        password: this.state.password\n      };\n\n      if (!this.checkValidEmail()) {\n        this.notificationDOMRef.current.addNotification({\n          title: \"Error\",\n          message: \"Invalid E-mail format!\",\n          type: \"danger\",\n          insert: \"top\",\n          container: \"top-center\",\n          animationIn: [\"animated\", \"fadeIn\"],\n          animationOut: [\"animated\", \"fadeOut\"],\n          dismiss: {\n            duration: 3000\n          },\n          dismissable: {\n            click: true\n          }\n        });\n      }\n\n      if (this.checkEmpty()) {\n        this.notificationDOMRef.current.addNotification({\n          title: \"Error\",\n          message: \"All fields are required. Please fill them all.\",\n          type: \"danger\",\n          insert: \"top\",\n          container: \"top-center\",\n          animationIn: [\"animated\", \"fadeIn\"],\n          animationOut: [\"animated\", \"fadeOut\"],\n          dismiss: {\n            duration: 3000\n          },\n          dismissable: {\n            click: true\n          }\n        });\n      }\n\n      if (this.checkValidEmail() && !this.checkEmpty()) {\n        fetch(\"http://localhost:3001/api/authenticate\", {\n          method: 'POST',\n          body: JSON.stringify(loginData),\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }).then(res => {\n          if (res.status === 200) {\n            res.json().then(data => {\n              sessionStorage.setItem('jwtToken', data.token);\n              this.notificationDOMRef.current.addNotification({\n                title: \"Success\",\n                message: \"Successfully logged in!\",\n                type: \"success\",\n                insert: \"top\",\n                container: \"top-center\",\n                animationIn: [\"animated\", \"fadeIn\"],\n                animationOut: [\"animated\", \"fadeOut\"],\n                dismiss: {\n                  duration: 2000\n                },\n                dismissable: {\n                  click: true\n                }\n              });\n            });\n          } else if (res.status === 401) {\n            res.json().then(data => {\n              this.notificationDOMRef.current.addNotification({\n                title: \"Error\",\n                message: data.error,\n                type: \"danger\",\n                insert: \"top\",\n                container: \"top-center\",\n                animationIn: [\"animated\", \"fadeIn\"],\n                animationOut: [\"animated\", \"fadeOut\"],\n                dismiss: {\n                  duration: 2000\n                },\n                dismissable: {\n                  click: true\n                }\n              });\n            });\n          }\n        });\n      }\n    };\n\n    this.handleEmailChange = event => {\n      let email = event.target.value;\n      this.setState({\n        email: email\n      });\n    };\n\n    this.handlePasswordChange = event => {\n      let password = event.target.value;\n      this.setState({\n        password: password\n      });\n    };\n\n    this.checkValidEmail = () => {\n      var re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n      return re.test(String(this.state.email).toLowerCase());\n    };\n\n    this.checkEmpty = () => {\n      return this.state.email.length === 0 || this.state.password === 0;\n    };\n\n    this.state = {\n      email: \"\",\n      password: \"\"\n    };\n    this.notificationDOMRef = React.createRef();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"container login-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(ReactNotification, {\n      ref: this.notificationDOMRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-md-12 col-sm-6 login-form-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, \"Login to E-Vote\"), React.createElement(\"form\", {\n      onSubmit: this.onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      className: \"form-control\",\n      placeholder: \"Your Email\",\n      onChange: this.handleEmailChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"password\",\n      className: \"form-control\",\n      placeholder: \"Your Password\",\n      onChange: this.handlePasswordChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"form-group\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"submit\",\n      className: \"btnSubmit\",\n      value: \"Login\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }))))));\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\popes\\React\\online-voting\\client\\src\\Login.js"],"names":["React","ReactNotification","Login","Component","constructor","props","onSubmit","event","preventDefault","loginData","email","state","password","checkValidEmail","notificationDOMRef","current","addNotification","title","message","type","insert","container","animationIn","animationOut","dismiss","duration","dismissable","click","checkEmpty","fetch","method","body","JSON","stringify","headers","then","res","status","json","data","sessionStorage","setItem","token","error","handleEmailChange","target","value","setState","handlePasswordChange","re","test","String","toLowerCase","length","createRef","render"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport ReactNotification from \"react-notifications-component\";\r\nimport \"react-notifications-component/dist/theme.css\";\r\n\r\n\r\n\r\nexport default class Login extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            email : \"\",\r\n            password : \"\",\r\n        };\r\n        this.notificationDOMRef = React.createRef();\r\n\r\n    }\r\n\r\n\r\n    onSubmit = (event) => {\r\n        event.preventDefault();\r\n        let loginData = {\r\n            email: this.state.email,\r\n            password: this.state.password\r\n        };\r\n\r\n        if(!this.checkValidEmail()){\r\n            this.notificationDOMRef.current.addNotification({\r\n                title: \"Error\",\r\n                message: \"Invalid E-mail format!\",\r\n                type: \"danger\",\r\n                insert: \"top\",\r\n                container: \"top-center\",\r\n                animationIn: [\"animated\", \"fadeIn\"],\r\n                animationOut: [\"animated\", \"fadeOut\"],\r\n                dismiss: { duration: 3000 },\r\n                dismissable: { click: true }\r\n            });\r\n        }\r\n\r\n        if(this.checkEmpty()){\r\n            this.notificationDOMRef.current.addNotification({\r\n                title: \"Error\",\r\n                message: \"All fields are required. Please fill them all.\",\r\n                type: \"danger\",\r\n                insert: \"top\",\r\n                container: \"top-center\",\r\n                animationIn: [\"animated\", \"fadeIn\"],\r\n                animationOut: [\"animated\", \"fadeOut\"],\r\n                dismiss: { duration: 3000 },\r\n                dismissable: { click: true }\r\n            });\r\n        }\r\n\r\n        if(this.checkValidEmail() && !this.checkEmpty()) {\r\n            fetch(\"http://localhost:3001/api/authenticate\", {\r\n                method: 'POST',\r\n                body: JSON.stringify(loginData),\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            })\r\n                .then(res => {\r\n                    if (res.status === 200) {\r\n                        res.json().then(data => {\r\n                            sessionStorage.setItem('jwtToken', data.token);\r\n                            this.notificationDOMRef.current.addNotification({\r\n                                title: \"Success\",\r\n                                message: \"Successfully logged in!\",\r\n                                type: \"success\",\r\n                                insert: \"top\",\r\n                                container: \"top-center\",\r\n                                animationIn: [\"animated\", \"fadeIn\"],\r\n                                animationOut: [\"animated\", \"fadeOut\"],\r\n                                dismiss: {duration: 2000},\r\n                                dismissable: {click: true}\r\n                            });\r\n                        });\r\n\r\n                    }\r\n                    else if (res.status === 401) {\r\n                        res.json().then(data => {\r\n                            this.notificationDOMRef.current.addNotification({\r\n                                title: \"Error\",\r\n                                message: data.error,\r\n                                type: \"danger\",\r\n                                insert: \"top\",\r\n                                container: \"top-center\",\r\n                                animationIn: [\"animated\", \"fadeIn\"],\r\n                                animationOut: [\"animated\", \"fadeOut\"],\r\n                                dismiss: {duration: 2000},\r\n                                dismissable: {click: true}\r\n                            });\r\n                        })\r\n                    }\r\n                })\r\n        }\r\n\r\n    };\r\n\r\n    handleEmailChange = (event) =>{\r\n        let email = event.target.value;\r\n        this.setState({\r\n            email: email\r\n        });\r\n\r\n\r\n    };\r\n\r\n    handlePasswordChange = (event) => {\r\n        let password = event.target.value;\r\n        this.setState({\r\n            password: password\r\n        });\r\n    };\r\n\r\n    checkValidEmail = () => {\r\n        var re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n        return re.test(String(this.state.email).toLowerCase());\r\n    };\r\n\r\n    checkEmpty = () => {\r\n      return this.state.email.length === 0 || this.state.password === 0;\r\n\r\n    };\r\n\r\n    render(){\r\n\r\n        return(\r\n\r\n            <div className=\"container login-container\">\r\n                <ReactNotification ref={this.notificationDOMRef} />\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-12 col-sm-6 login-form-1\">\r\n                        <h3>Login to E-Vote</h3>\r\n                        <form onSubmit={this.onSubmit}>\r\n                            <div className=\"form-group\">\r\n                                <input type=\"text\" className=\"form-control\" placeholder=\"Your Email\" onChange={this.handleEmailChange}/>\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <input type=\"password\" className=\"form-control\" placeholder=\"Your Password\" onChange={this.handlePasswordChange}/>\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <input type=\"submit\" className=\"btnSubmit\" value=\"Login\"/>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n            );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}