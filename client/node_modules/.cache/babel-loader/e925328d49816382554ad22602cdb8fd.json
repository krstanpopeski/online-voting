{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\popes\\\\React\\\\online-voting\\\\client\\\\src\\\\ListPolls.js\";\nimport React from 'react';\nimport \"antd/dist/antd.css\";\nimport \"./index.css\";\nimport { List, Avatar, Icon, Skeleton } from \"antd\";\n\nconst IconText = ({\n  type,\n  text\n}) => React.createElement(\"span\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 9\n  },\n  __self: this\n}, React.createElement(Icon, {\n  type: type,\n  style: {\n    marginRight: 8\n  },\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 10\n  },\n  __self: this\n}), text);\n\nexport default class ListPolls extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.populateData = () => {\n      let listData = [];\n      this.state.polls.forEach(item => {\n        listData.push({\n          title: item.title,\n          avatar: \"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\",\n          content: item.description,\n          imageUrl: item.image.url,\n          createdAt: item.createdAt,\n          likes: item.likes,\n          comments: item.comments,\n          id: item._id\n        });\n      });\n      this.setState({\n        listData: listData\n      });\n    };\n\n    this.handlePollClick = id => {\n      console.log(id);\n    };\n\n    this.state = {\n      loading: false,\n      polls: [],\n      listData: []\n    };\n  }\n\n  componentWillMount() {\n    this.setState({\n      loading: true\n    }, () => {\n      fetch('http://localhost:3001/api/polls').then(res => {\n        if (res.status === 200) {\n          res.json().then(data => {\n            this.setState({\n              loading: false,\n              polls: data\n            }, () => {\n              this.populateData();\n            });\n          });\n        }\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col md-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(Skeleton, {\n      loading: this.state.loading,\n      active: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(List, {\n      itemLayout: \"vertical\",\n      size: \"large\",\n      pagination: {\n        onChange: page => {\n          console.log(page);\n        },\n        pageSize: 3\n      },\n      dataSource: this.state.listData,\n      footer: React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, \"ant design\"), \" footer part\"),\n      renderItem: item => React.createElement(List.Item, {\n        key: item.title,\n        actions: [React.createElement(IconText, {\n          type: \"like-o\",\n          text: item.likes,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96\n          },\n          __self: this\n        }), React.createElement(IconText, {\n          type: \"message\",\n          text: item.comments.length,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97\n          },\n          __self: this\n        })],\n        extra: React.createElement(\"a\", {\n          onClick: this.handlePollClick(item.id),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          width: 272,\n          alt: \"logo\",\n          src: 'http://localhost:3001/api/image/' + item.imageUrl,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101\n          },\n          __self: this\n        })),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, React.createElement(List.Item.Meta, {\n        avatar: React.createElement(Avatar, {\n          src: item.avatar,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110\n          },\n          __self: this\n        }),\n        title: React.createElement(\"a\", {\n          onClick: this.handlePollClick(item.id),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111\n          },\n          __self: this\n        }, item.title),\n        description: \"Created at: \".concat(Date(item.createdAt)),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }), item.content),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    })))));\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\popes\\React\\online-voting\\client\\src\\ListPolls.js"],"names":["React","List","Avatar","Icon","Skeleton","IconText","type","text","marginRight","ListPolls","Component","constructor","props","populateData","listData","state","polls","forEach","item","push","title","avatar","content","description","imageUrl","image","url","createdAt","likes","comments","id","_id","setState","handlePollClick","console","log","loading","componentWillMount","fetch","then","res","status","json","data","render","onChange","page","pageSize","length","Date"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport \"antd/dist/antd.css\";\r\nimport \"./index.css\";\r\nimport { List, Avatar, Icon, Skeleton } from \"antd\";\r\n\r\n\r\n\r\nconst IconText = ({ type, text }) => (\r\n    <span>\r\n    <Icon type={type} style={{ marginRight: 8 }} />\r\n        {text}\r\n  </span>\r\n);\r\n\r\nexport default class ListPolls extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            loading: false,\r\n            polls: [],\r\n            listData: []\r\n        }\r\n    }\r\n\r\n    componentWillMount(){\r\n        this.setState({\r\n            loading: true\r\n        }, () => {\r\n            fetch('http://localhost:3001/api/polls')\r\n                .then(res => {\r\n                    if (res.status === 200) {\r\n                        res.json().then(data => {\r\n                            this.setState({\r\n                                loading: false,\r\n                                polls: data\r\n                            }, () => {this.populateData()});\r\n                        })\r\n                    }\r\n                })\r\n        });\r\n\r\n    }\r\n\r\n    populateData = () => {\r\n          let listData = [];\r\n          this.state.polls.forEach(item => {\r\n              listData.push({\r\n                  title: item.title,\r\n                  avatar: \"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\",\r\n                  content: item.description,\r\n                  imageUrl: item.image.url,\r\n                  createdAt: item.createdAt,\r\n                  likes: item.likes,\r\n                  comments: item.comments,\r\n                  id: item._id\r\n              });\r\n          });\r\n          this.setState({\r\n              listData: listData\r\n          });\r\n\r\n    };\r\n\r\n    handlePollClick = (id) => {\r\n      console.log(id);\r\n    };\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col md-12\">\r\n                        <Skeleton loading={this.state.loading} active>\r\n                        <List\r\n                            itemLayout=\"vertical\"\r\n                            size=\"large\"\r\n                            pagination={{\r\n                                onChange: page => {\r\n                                    console.log(page);\r\n                                },\r\n                                pageSize: 3\r\n                            }}\r\n                            dataSource={this.state.listData}\r\n                            footer={\r\n                                <div>\r\n                                    <b>ant design</b> footer part\r\n                                </div>\r\n                            }\r\n                            renderItem={item => (\r\n                                <List.Item\r\n                                    key={item.title}\r\n                                    actions={[\r\n                                        <IconText type=\"like-o\" text={item.likes} />,\r\n                                        <IconText type=\"message\" text= {item.comments.length}/>\r\n                                    ]}\r\n                                    extra={\r\n                                        <a onClick={this.handlePollClick(item.id)}>\r\n                                        <img\r\n                                            width={272}\r\n                                            alt=\"logo\"\r\n                                            src={'http://localhost:3001/api/image/' + item.imageUrl}\r\n                                        />\r\n                                        </a>\r\n                                    }\r\n                                >\r\n                                    <List.Item.Meta\r\n                                        avatar={<Avatar src={item.avatar} />}\r\n                                        title={<a onClick={this.handlePollClick(item.id)}>{item.title}</a>}\r\n                                        description={`Created at: ${Date(item.createdAt)}`}\r\n                                    />\r\n                                    {item.content}\r\n                                </List.Item>\r\n                            )}\r\n                        />\r\n                        </Skeleton>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}